"""
Arduino configuration generator for Smart Car
Generates Arduino header file from config.yaml
"""

import os
from config_loader import config

def generate_arduino_config():
    """Generate Arduino configuration header file"""
    
    # Load configuration
    wifi_config = config.get_wifi_config()
    motor_config = config.get_motor_config()
    
    # Generate Arduino header content
    header_content = f'''/*
 * AUTO-GENERATED CONFIGURATION FILE
 * Generated from config.yaml
 * DO NOT EDIT THIS FILE DIRECTLY - Edit config.yaml instead
 */

#ifndef CONFIG_H
#define CONFIG_H

// WiFi Configuration
const char* WIFI_SSID = "{wifi_config['ssid']}";
const char* WIFI_PASSWORD = "{wifi_config['password']}";

// Motor Configuration
const int MOTOR_DIRECTION_CORRECTION[4] = {{{', '.join(map(str, motor_config['direction_correction']))}}};
const int MOTOR_MAX_SPEED = {motor_config['max_speed']};
const int MOTOR_PWM_FREQUENCY = {motor_config['pwm_frequency']};
const int MOTOR_PWM_RESOLUTION = {motor_config['pwm_resolution']};
const int MOTOR2_STARTUP_DELAY = {motor_config['motor2_startup_delay']};

// Motor Pin Configuration
const int MOTOR_PINS[4][2] = {{
    {{{config.get('motor_pins.front_right.pin_in1', 16)}, {config.get('motor_pins.front_right.pin_in2', 17)}}},  // FRONT_RIGHT_MOTOR
    {{{config.get('motor_pins.back_right.pin_in1', 18)}, {config.get('motor_pins.back_right.pin_in2', 19)}}},   // BACK_RIGHT_MOTOR
    {{{config.get('motor_pins.front_left.pin_in1', 27)}, {config.get('motor_pins.front_left.pin_in2', 26)}}},   // FRONT_LEFT_MOTOR
    {{{config.get('motor_pins.back_left.pin_in1', 25)}, {config.get('motor_pins.back_left.pin_in2', 33)}}}     // BACK_LEFT_MOTOR
}};

// System Configuration
const bool ENABLE_DEBUG_OUTPUT = {str(config.get('system.enable_debug_output', True)).lower()};

#endif // CONFIG_H
'''
    
    # Write to file
    config_file_path = "arduino_config.h"
    try:
        with open(config_file_path, 'w') as f:
            f.write(header_content)
        print(f"‚úÖ Arduino configuration generated: {config_file_path}")
        return True
    except Exception as e:
        print(f"‚ùå Error generating Arduino configuration: {e}")
        return False

def update_arduino_code():
    """Update Arduino code to use configuration"""
    
    # Instructions for manual update
    instructions = """
    üìã To use the generated configuration in your Arduino code:
    
    1. Include the generated header file:
       #include "arduino_config.h"
    
    2. Replace hardcoded values with configuration constants:
       - WiFi credentials: Use WIFI_SSID and WIFI_PASSWORD
       - Motor settings: Use MOTOR_DIRECTION_CORRECTION, MOTOR_MAX_SPEED, etc.
       - Motor pins: Use MOTOR_PINS array
    
    3. Example replacements:
       OLD: const char* ssid = "SLT_FIBRE";
       NEW: const char* ssid = WIFI_SSID;
       
       OLD: int motorDirectionCorrection[4] = {-1, 1, 1, 1};
       NEW: int motorDirectionCorrection[4] = {MOTOR_DIRECTION_CORRECTION[0], MOTOR_DIRECTION_CORRECTION[1], MOTOR_DIRECTION_CORRECTION[2], MOTOR_DIRECTION_CORRECTION[3]};
       
       OLD: #define MAX_SPEED 255
       NEW: #define MAX_SPEED MOTOR_MAX_SPEED
    """
    
    print(instructions)

if __name__ == "__main__":
    print("üîß Generating Arduino configuration...")
    if generate_arduino_config():
        update_arduino_code()
    else:
        print("‚ùå Failed to generate Arduino configuration")
